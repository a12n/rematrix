#!/usr/bin/env python3

import sys

size = None
padding = None
spacing = None
lineheight = None
base = None
scalew = None
scaleh = None
chars = dict()

def parseline(s):
    fields = s.split()
    props = dict()
    for kv in fields[1:]:
        try:
            k, v = kv.split("=")
            props[k] = v
        except ValueError:
            pass
    return (fields[0], props)

def parsetuple(s):
    return tuple(map(int, s.split(",")))

for line in sys.stdin:
    tag, props = parseline(line)
    if tag == "info":
        size = int(props["size"])
        padding = parsetuple(props["padding"])
        spacing = parsetuple(props["spacing"])
    elif tag == "common":
        lineheight = int(props["lineHeight"])
        base = int(props["base"])
        scalew = int(props["scaleW"])
        scaleh = int(props["scaleH"])
    elif tag == "char":
        width = int(props["width"])
        height = int(props["height"])
        if width > 0 and height > 0:
            id = int(props["id"])
            x = int(props["x"])
            y = int(props["y"])
            xoffset = int(props["xoffset"])
            yoffset = int(props["yoffset"])
            xadvance = int(props["xadvance"])
            chars[id] = ((x, y), (width, height), (xoffset, yoffset), xadvance)

def format(x):
    if isinstance(x, tuple) or isinstance(x, list):
        return "".join(["{", ", ".join(map(format, x)), "}"])
    else:
        return str(x)

print(format(size), ",")
print(format((scalew, scaleh)), ",")
print(format(padding), ",")
print(format(spacing), ",")
print(format(lineheight), ",")
print(format(base), ",")
print(format(sorted(chars.items())))
